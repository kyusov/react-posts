{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","posts","setPosts","authors","setAuthors","sortedPosts","setSortedPosts","useEffect","Promise","all","fetch","then","a","responsePosts","responseAuthors","json","postsWithAuthorName","map","post","author","find","id","userId","name","Container","Row","className","InputGroup","Text","FormControl","placeholder","onChange","func","wait","timeout","context","this","args","arguments","later","apply","clearTimeout","setTimeout","debounce","event","authorInput","target","value","filter","i","split","fName","lName","substr","length","toUpperCase","forEach","sortedAuthor","push","Col","lg","sm","xs","Card","Body","Title","title","body","Footer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1daedc45.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport { Card, Container, Row, Col, InputGroup, FormControl } from 'react-bootstrap'\n\nfunction App() {\n    const [posts, setPosts] = useState([])\n    const [authors, setAuthors] = useState([])\n    const [sortedPosts, setSortedPosts] = useState([])\n\n    useEffect(() => {\n        Promise.all([\n            fetch('https://jsonplaceholder.typicode.com/posts'),\n            fetch('https://jsonplaceholder.typicode.com/users'),\n        ]).then(async ([responsePosts, responseAuthors]) => {\n            const posts = await responsePosts.json()\n            const authors = await responseAuthors.json()\n\n            const postsWithAuthorName = posts.map((post) => {\n                post.author = authors.find((author) => author.id === post.userId)\n                return post\n            })\n\n            setPosts(postsWithAuthorName)\n\t\t\tsetSortedPosts(postsWithAuthorName)\n            setAuthors(\n                authors.map((author) => {\n                    return {\n                        id: author.id,\n                        name: author.name,\n                    }\n                })\n            )\n        })\n    }, [])\n\n    const inputHandler = (event) => {\n        const authorInput = event.target.value\n\t\tif (authorInput === '') {\n\t\t\tsetSortedPosts(posts)\n\t\t} else {\n\t\t\tconst sortedPosts = []\n\n\t\t\tconst sortedAuthors = authors.filter(i => {\n\t\t\t\tconst [fName, lName] = i.name.split(' ')\n\t\t\t\treturn fName.substr(0, authorInput.length).toUpperCase() === authorInput.toUpperCase() ||\n\t\t\t\tlName.substr(0, authorInput.length).toUpperCase() === authorInput.toUpperCase()\n\t\t\t})\n\n\t\t\tsortedAuthors.forEach(sortedAuthor => {\n\t\t\t\tsortedPosts.push(\n\t\t\t\t\t...posts.filter(post => post.userId === sortedAuthor.id)\n\t\t\t\t)\n\t\t\t})\n\n\t\t\tsetSortedPosts(sortedPosts)\n\t\t}\n    }\n\n    const debounce = (func, wait) => {\n        let timeout\n\n        return function () {\n            const context = this // undefined (arrow func)\n            const args = arguments // event (from input)\n\n            // call this func with context and args after delay\n            const later = function () {\n                timeout = null\n                func.apply(context, args)\n            }\n\n            // if the function was called before the delay finished then clear the timeout and start it again\n            clearTimeout(timeout)\n\n            timeout = setTimeout(later, wait)\n        }\n    }\n\n    return (\n        <Container>\n            <Row className=\"spacing\">\n                <InputGroup className=\"p-0\">\n                    <InputGroup.Text className=\"input-group-append\" id=\"basic-addon1\">\n                        <i className=\"fa fa-search\"></i>\n                    </InputGroup.Text>\n                    <FormControl\n                        placeholder=\"Author\"\n                        aria-label=\"Author\"\n                        aria-describedby=\"basic-addon1\"\n                        onChange={debounce(inputHandler, 500)}\n                    />\n                </InputGroup>\n            </Row>\n            <Row>\n                {sortedPosts.map((post) => (\n                    <Col key={post.id} className=\"spacing\" lg={4} sm={6} xs={12}>\n                        <Card>\n                            <Card.Body>\n                                <Card.Title className=\"blue\">{post.title}</Card.Title>\n                                <Card.Text>{post.body}</Card.Text>\n                            </Card.Body>\n                            <Card.Footer>\n                                <small className=\"text-muted\">{post.author.name}</small>\n                            </Card.Footer>\n                        </Card>\n                    </Col>\n                ))}\n            </Row>\n        </Container>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}